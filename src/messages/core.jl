# Core messages

### Halt

"""
This request should trigger a software halt. It is expected to close the connection and put the
software and hardware into a state where it is safe to power down.
"""
struct HaltRequest <: AbstractKatcpRequest end

### Help

"""
Before sending a reply, the help request will send a number of #help inform messages. If no name
parameter is sent the help request will return one inform message for each request available on the device.
If a name parameter is specified, only an inform message for that request will be sent. On success the
first reply parameter after the status code will contain the number of help inform messages generated by
this request. If the name parameter does not correspond to a request on the device, a reply with a failure
code and message should be sent.
"""
struct HelpRequest <: AbstractKatcpRequest
    name::Maybe{String}
end

HelpRequest() = HelpRequest(nothing)
HelpRequest(s::String) = HelpRequest(Some(s))

"""
Although the description is not intended to be machine readable, the preferred convention for describing
the parameters and return values is to use a syntax like that seen on the right-hand side of a BNF production
(as commonly seen in the usage strings of UNIX command-line utilities and the synopsis sections
of man pages).
"""
struct HelpInform <: AbstractKatcpInform
    name::String
    description::String
end

struct HelpReply <: AbstractKatcpReply
    num_commands::Int64
end

### Restart

"""
This message should trigger a software reset. It is expected to close the connection, reload the
software and begin execution again, preferably without changing the hardware configuration (if possible).
It would end with the device being ready to accept new connections again. The reply should be sent before
the connection to the current client is closed.
"""
struct RestartRequest <: AbstractKatcpRequest end

### Watchdog

"""
This  may be sent by the client occasionally to check that the connection to the
device is still active. The device should respond with a success reply if it receives the watchdog request.
"""
struct WatchdogRequest <: AbstractKatcpRequest end

### VersionList

"""
Before sending a reply the ?version-list command will send a
series of #version-list informs. The list of informs should include all of the roles and components
returned via #version-connect but may contain additional roles or components.
"""
struct VersionListRequest <: AbstractKatcpRequest end

struct VersionListInform <: AbstractKatcpInform
    name::String
    version::String
    identifier::Maybe{String}
end

VersionListInform(name, version) = VersionListInform(name, version, nothing)
VersionListInform(name, version, identifier::String) = VersionListInform(name, version, Some(identifier))

struct VersionListReply <: AbstractKatcpReply
    num_informs::Int64
end

######## Async Informs

"""
Sent to the client by the device shortly before the client is disconnected. In the case where a client is being
disconnected because a new client has connected, the message
should include the IP number and port of the new client for tracking purposes.
"""
struct DisconnectInform <: AbstractKatcpInform
    message::String
end

"""
Sent to the client when it connects. These inform messages use the same argument format as `VersionListInform`
and all roles and components declared via `VersionConnectInform` should be included in the informs sent in
response to `VersionListRequest`.
"""
struct VersionConnectInform <: AbstractKatcpInform
    name::String
    version::String
    identifier::Maybe{String}
end

VersionConnectInform(name, version) = VersionConnectInform(name, version, nothing)
VersionConnectInform(name, version, identifier::String) = VersionConnectInform(name, version, Some(identifier))

"""
Only required for dynamic devices, i.e. devices that may change their katcp interface during a connection.
Sent to the client by the device to indicate that the katcp interface has changed. Passing no arguments
with the inform implies that the whole katcp interface may have changed. The optional parameters allow
more fine grained specification of what changed
"""
struct InterfaceChangedInform <: AbstractKatcpInform
    object::String
    name::Maybe{String}
    change::Maybe{ChangeSpecification}
end

InterfaceChangedInform(object) = InterfaceChangedInform(object, nothing, nothing)
InterfaceChangedInform(object, name::String, change::ChangeSpecification) = InterfaceChangedInform(object, Some(name), Some(change))

export HaltRequest,
    HelpRequest,
    HelpInform,
    HelpReply,
    RestartRequest,
    WatchdogRequest,
    VersionListRequest,
    VersionListInform,
    VersionListReply,
    DisconnectInform,
    VersionConnectInform,
    InterfaceChangedInform
